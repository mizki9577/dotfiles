" .vimrc

set encoding=utf-8
scriptencoding utf-8

if has('unix')
	let $MYVIMDIR = expand('$HOME/.vim')
elseif has('win32')
	let $MYVIMDIR = expand('$HOME/vimfiles')
endif

" Dein {{{1
let g:dein#types#git#clone_depth = 1
set runtimepath+=$MYVIMDIR/dein/repos/github.com/Shougo/dein.vim
let s:dein_dir = expand('$MYVIMDIR/dein')
if dein#load_state(s:dein_dir)
	call dein#begin(s:dein_dir)

	call dein#load_toml(expand('$MYVIMDIR/dein.toml'),      { 'lazy': 0 })
	call dein#load_toml(expand('$MYVIMDIR/dein_lazy.toml'), { 'lazy': 1 })

	call dein#end()
	call dein#save_state()
endif

" Options {{{1
	" UI {{{2
		" フォント
		if has('x11')
			set guifont=M+\ 1mn\ regular\ 12
		elseif has('gui_win32')
			set guifont=M+_1mn_regular:h10:cSHIFTJIS
		endif

		" GUI オプションはだいたい無効
		" icM になるはず
		set guioptions&
		set go-=a go-=e go-=g go-=m go-=r go-=L go-=t go-=T
		set go+=c go+=M

		" UI の区切り部品に使われる文字
		set fillchars=stl:\ ,stlnc:\ ,vert:\|,fold:\ ,diff:\ 

		" ステータス行を常に表示する
		set laststatus=2

		" 見えない文字の可視化
		set list	" local
		set listchars=eol:⏎,tab:>\ ,trail:␣,extends:»,precedes:«
		
		" 行番号を表示
		set number	" local

		" ルーラを表示しない
		set noruler

		" 短縮表示するメッセージのリスト
		" a : ファイル状態の短縮表示
		" I : 起動時のウェルカムメッセージ省略
		" s : ?まで検索したので?に戻ります (vim-anzu が echo するので)
		set shortmess&
		set shm+=a shm-=f shm-=i shm-=l shm-=n shm-=x shm-=o shm-=O shm-=t shm-=T shm+=I shm+=s

		" 行変更報告は必ずしてほしい
		set report=0

		" 折り返された行の先頭に表示する文字列
		set showbreak=»

		" 折り返された行の行頭のインデントを合わせる
		set breakindent

		" breakindent が適用されたとき, showbreak の文字を折り返された行頭に表示する
		set breakindentopt=sbr

		" 未解決コマンドを表示する
		set showcmd

		" タブバーを常に表示する
		set showtabline=2

		" 折り返された見掛け上の1行をウィンドウの最後の行でも表示する
		set display=lastline

		" 背景は黒
		set background=dark
	" UI Format {{{2
		" ステータス行の書式
		"set statusline=%f\ %m%r%h%w%q%=[Line\ %3l\ /\ %3L]\ [Col\ %3c\ (%3v)]\ [At\ %5{strchars(join(getline(1,line('.')-1),''))+strchars(getline('.')[:col('.')-1])}\ /\ %5{strchars(join(getline(1,'$'),''))}]
		set statusline=%f\ %m%r%h%w%q%=[Line\ %3l\ /\ %3L]\ [Col\ %3c\ (%3v)]\ [Total:\ %5{strchars(join(getline(1,'$'),''))}]
		
		" タブバーの書式
		set tabline&	" いつかやる
		" タイトルバーの書式
		set titlestring& "いつかやる
	" i18n {{{2
		" 迷ったら半角
		set ambiwidth=single

		" 想定される文字エンコーディングのリスト
		set fileencodings=ucs-bom,utf-8,cp932,euc-jp

		" なんかよくわからんけどSKK動く
		if has('xim')
			set iminsert=2
		endif
	" Backup, Session, View, Undo, Swap {{{2
		" バックアップを有効化
		set backup

		" 永続的アンドゥ履歴を有効
		set undofile	" local
		
		" バックアップの属性維持
		set backupcopy=yes

		" バックアップの保存先
		set backupdir=$MYVIMDIR/backup

		" アンドゥファイルの保存先
		set undodir=$MYVIMDIR/undo

		" ビューの保存先
		set viewdir=$MYVIMDIR/view

		" スワップの保存先
		set directory=.,$MYVIMDIR/swap
	" Disabled keys {{{2
		" コマンドラインウィンドウ
		set cedit=

		" 行末から行頭に移動
		set whichwrap=

		" Alt メニュー
		set winaltkeys=no

		" マウス
		set mouse=
	" Search / Replace {{{2
		" 置換フラグ 'g' の効果を反転させる
		set gdefault

		" 起動時はハイライト無効
		set nohlsearch

		" 大文字と小文字を区別しない
		set ignorecase

		" インクリメンタルサーチ
		set incsearch

		" 新しい正規表現エンジンを使う
		set regexpengine=2

		" 大文字が含まれるときは大文字を区別する
		set smartcase
	" Command line {{{2
		" コマンドライン補完の拡張モード
		set wildmenu

		" コマンドライン補完のタブキーの挙動
		set wildmode=longest,full

		" コマンド履歴の数
		set history=100
	" Scrolling {{{2
		" スクロール同期のオプション
		set scrollopt=ver,hor,jump
		" 水平スクロールも1文字単位で行う
		set sidescroll=1

		" 水平スクロールのオフセット
		set sidescrolloff=8
	" }}}
	" クリップボード
	set clipboard=

	" diff モードのオプション
	set diffopt=filler,context:5,vertical

	" 行連結の空白は常に1個
	set nojoinspaces

	" <C-a> や <C-x> で増減させる文字の種類
	set nrformats=alpha,octal,hex

	" インデントを 'shiftwidth' の倍数の丸める
	set shiftround

	" 賢いタブ
	set smarttab

	" 新しいウィンドウは下に
	set splitbelow

	" 新しいウィンドウは右に
	set splitright

	" ジャンプ系コマンドで空白文字でもそこにジャンプする
	set nostartofline

	" 矩形選択でタブの内側も移動できる
	set virtualedit=block

	" 補完オプション
	set completeopt=menuone,preview

	" read modeline! fuck debian!
	set modeline

" Auto Commands {{{1
augroup vimrc
	autocmd!

	" 世代バックアップ。バックアップファイルの拡張子を日付にすることで上書きを回避する
	autocmd BufWritePre * let &l:backupext = '-' . substitute(expand("%:p"), "/", "%", "g") . '-' . strftime("%y%m%d%H%M%S")

	" ウィンドウを切り替えたときに 'cursorline' を切り替える
	autocmd WinEnter * setlocal cursorline
	autocmd WinLeave * setlocal nocursorline

	" 'filetype' が空だったら syntax off
	"autocmd WinEnter * execute 'syntax' !&l:filetype ? 'on' : 'off'
augroup END
" Mapping {{{1
" Unite
nnoremap <Space><Space> :Unite<Space>
nnoremap <silent> <Space><Enter> :Unite source<Enter>

" Edit .vimrc
nnoremap <silent> <Space><BS> :tabe $MYVIMRC<Enter>

" カーソル移動に gj を使用する
noremap <silent> j gj
noremap <silent> k gk
noremap <silent> gj j
noremap <silent> gk k

" Y で末尾までヤンク
nmap Y y$

" ハイライトのトグル
nnoremap <silent> <Esc> <Esc>:setlocal hlsearch!<Enter>

" 検索開始時に 'hlsearch' を入
nnoremap / :setlocal hlsearch<Enter>/
nnoremap ? :setlocal hlsearch<Enter>?

" anzu
nmap <silent> n <Plug>(anzu-n-with-echo)zv:setlocal hlsearch<Enter>
nmap <silent> N <Plug>(anzu-N-with-echo)zv:setlocal hlsearch<Enter>
nmap <silent> * <Plug>(anzu-star-with-echo)zv:setlocal hlsearch<Enter>
nmap <silent> # <Plug>(anzu-sharp-with-echo)zv:setlocal hlsearch<Enter>

" 行番号相対表示のトグル
nnoremap <expr> <silent> <Space>n ToggleRelativeNumber()
function! ToggleRelativeNumber()
	" 'number' が切のときは何もしない
	if &l:number
		setlocal relativenumber!
	endif
endfunction

" 行番号表示のトグル
nnoremap <expr> <silent> <Space>N ToggleShowNumber()
function! ToggleShowNumber()
	setlocal norelativenumber
	if &l:number || &l:relativenumber
		setlocal nonumber
	else
		setlocal number
	endif
endfunction

" 'colorcolumn' に追加
nnoremap <silent> <Space>c :call ToggleColorColumn()<Enter>
function! ToggleColorColumn()
	" a:column を 'colorcolumn' に追加または削除
	let l:column = virtcol('.')
	let l:columnlist = split(&l:colorcolumn, ",")
	let l:index = index(l:columnlist, string(l:column))
	if l:index == -1
		call add(l:columnlist, l:column)
	else
		call remove(l:columnlist, l:index)
	endif
	let &l:colorcolumn = join(l:columnlist, ',')
endfunction

" 'colorcolumn' をクリア
nnoremap <silent> <Space>C :setlocal colorcolumn=<Enter>

" スクロール同期の切り換え
nnoremap <silent> <Space>b :setlocal cursorbind!<Enter>

" 'wrap' の切り換え
nnoremap <expr> <silent> <Space>w ToggleWrap()
function! ToggleWrap()
	if &l:wrap
		if stridx(&l:cpoptions, 'n') == -1
			setlocal cpoptions+=n
			setlocal nowrap
		else
			setlocal cpoptions-=n
		endif
	else
		setlocal wrap
	endif
endfunction
setlocal cpoptions+=n

" 'ambiwidth' の切り換え
nnoremap <expr> <silent> <Space>a ToggleAmbiguousWidth()
function! ToggleAmbiguousWidth()
	if &l:ambiwidth == 'single'
		setlocal ambiwidth=double
	else
		setlocal ambiwidth=single
	endif
endfunction

" Gundo
nnoremap <silent> <Space>u :GundoToggle<Enter>

" VimFiler
nnoremap <silent> <Space>f :VimFilerSplit -winwidth=48 -toggle -explorer<Enter>

" Unite outline
nnoremap <silent> <Space>o :Unite outline -no-quit -vertical -toggle -winwidth=48<Enter>

" Unite tabs
nnoremap <silent> <Space>t :Unite tab -no-quit -vertical -toggle -winwidth=48<Enter>

" スクロールオフセットの切り替え
nnoremap <expr> <silent> <Space>s ToggleScrollOffset()
function! ToggleScrollOffset()
	let &l:scrolloff = &l:scrolloff ? 0 : 9999
endfunction
set scrolloff=9999

" 括弧
"inoremap <expr> <CR> CloseParenthesByEnter()
"function! CloseParenthesByEnter() abort
"	let l:parenthes = {'(': ')', '[': ']', '{': '}', '''': '''', '"': '"'}
"
"	let [l:lnum, l:col] = getpos('.')[1:2]
"	let l:line = getline(l:lnum)
"
"	let l:prev_char = matchstr(l:line, '.', l:col - 2)
"	if has_key(l:parenthes, l:prev_char)
"		return l:parenthes[l:prev_char] . "\<Left>\<CR>\<Esc>O"
"	endif
"
"	return "\<CR>"
"endfunction
"
"inoremap <expr> ) CloseParenthesByCloser(')')
"inoremap <expr> ] CloseParenthesByCloser(']')
"inoremap <expr> } CloseParenthesByCloser('}')
"function! CloseParenthesByCloser(closer) abort
"endfunction

" コマンドラインモード {{{2
" Emacs 風
cnoremap <C-f> <Right>
cnoremap <C-b> <Left>
cnoremap <C-p> <Up>
cnoremap <C-n> <Down>
cnoremap <C-a> <Home>
cnoremap <C-e> <End>
cnoremap <C-d> <Del>
" }}}
" Commands {{{1
command! -nargs=+ -complete=file -bar Tabedit call Tabedit(<f-args>)
function! Tabedit(...)
    for l:arg in a:000
        for l:filename in glob(l:arg, 0, 1)
            execute 'tabedit' l:filename
        endfor
    endfor
endfunction

command! -nargs=* -complete=help -bar Tabhelp tabnew | <mods> help <args> | only

" Misc {{{1
colorscheme pencil
syntax on
filetype plugin indent on

if dein#check_install()
	call dein#install()
endif

" vim: fdm=marker ts=4 sw=4
